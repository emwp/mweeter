// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    lastName      String?
    email         String?   @unique
    handle        String?   @unique @default(cuid())
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    mweets        Mweet[]
    followedBy    Follows[] @relation("following")
    following     Follows[] @relation("follower")
}

model Follows {
    id          String @id @default(cuid())
    userId      String
    user        User   @relation("follower", fields: [userId], references: [id])
    followingId String
    following   User   @relation("following", fields: [followingId], references: [id])

    @@index([userId])
    @@index([followingId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Mweet {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String   @db.VarChar(280)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@index([userId])
}
